datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")         // prisma:// in prod, plain postgres in dev
  directUrl = env("DIRECT_DATABASE_URL")  // required for migrations when url is prisma://
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  phone             String?  // <-- New field for user phone number
  totpSecret        String?
  is2faEnabled      Boolean  @default(false)
  emailConfirmed    Boolean  @default(false)
  confirmationToken String?
  createdAt         DateTime @default(now())
  publicKey         String?
  avatarUrl         String?  // <-- New field for user avatar
  settings          Json?    // <-- New field for user settings (preferences)
  messages          Message[] @relation("msg_sender")
  received          Message[] @relation("msg_receiver")
  threads           Thread[] @relation("ThreadParticipants")
  contacts          User[]   @relation("UserContacts") // Users this user has added as contacts
  contactOf         User[]   @relation("UserContacts") // Users who have added this user as a contact
  contactsOwned     Contact[] // Contacts owned by this user
}

model Message {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("msg_sender", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("msg_receiver", fields: [receiverId], references: [id])
  receiverId  String
  thread      Thread   @relation(fields: [threadId], references: [id])
  threadId    Int
  threadLastMessage Thread? @relation("ThreadLastMessage")
  ciphertext  String
  nonce       String
  createdAt   DateTime @default(now())
}

model Thread {
  id           Int       @id @default(autoincrement())
  title        String
  participants User[]    @relation("ThreadParticipants")
  messages     Message[]
  lastMessage  Message?  @relation("ThreadLastMessage", fields: [lastMessageId], references: [id])
  lastMessageId Int? @unique
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  ownerId   String   // User who owns this contact (fk to your User model)
  firstName String?
  lastName  String?
  note      String?
  publicKey String?  // optional: store remote partyâ€™s public key
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  emails    ContactEmail[]
  phones    ContactPhone[]

  @@index([ownerId, lastName, firstName])
}

model ContactEmail {
  id         String  @id @default(uuid())
  contactId  String
  email      String
  isPrimary  Boolean @default(false)

  contact    Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, email])
  @@index([email])
}

model ContactPhone {
  id         String  @id @default(uuid())
  contactId  String
  e164       String   // store normalized E.164, e.g. +19135551234
  label      String?  // "mobile", "work", etc.

  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, e164])
  @@index([e164])
}